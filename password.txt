gmail: srivatsasuneelk@gmail.com
google app password: bmee spin cvyv zlfx
C:\Users\sandh\OneDrive\Desktop\projects\product_price_scrapper\product_data.db
C:\Users\sandh\OneDrive\Desktop\projects\product_price_scrapper\web_app\server.py


import os
import re
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import sqlite3
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from scrapper2 import get_myntra_price, get_flipkart_price, get_amazon_price

def send_email(user_email, product_name, actual_price, url, id):
    try:
        from_email="srivatsasuneelk@gmail.com"
        app_password="bmee spin cvyv zlfx"

        subject=f"price drop alert: {product_name}"
        body=f"The price of the product you're looking to buy has dropped to ₹{actual_price}. Go ahead and buy it before price hikes at: {url}"

        message=MIMEMultipart()
        message["From"]=from_email
        message["To"]=user_email
        message["Subject"]=subject
        message.attach(MIMEText(body, "plain"))

        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()   
            server.login(from_email, app_password)
            text= message.as_string()
            server.sendmail(from_email, user_email, text)
            print(f"email sent to {user_email}")

            conn=connect_to_db()
            cursor=conn.cursor()
            cursor.execute("UPDATE products SET notified=1 WHERE id=?",(id,))
            conn.commit()
            conn.close()
    except Exception as e:
        print(f"Failed to send email {e}")



def connect_to_db():
    return sqlite3.connect('product_data.db')

def get_urls():
    conn=connect_to_db()
    cursor=conn.cursor()
    cursor.execute("SELECT id, product_name, email, url, desired_price, notified FROM products")
    urls=cursor.fetchall()
    conn.close()
    return urls


api_key = os.getenv('SCRAPINGBEE_API_KEY')

def get_price(url):
    # Determine the website from URL
    if 'flipkart.' in url:
        return get_flipkart_price(url)
    elif 'amazon.' in url:
        return get_amazon_price(url)
    elif 'myntra.' in url:
        return get_myntra_price(url)
    else:
        print("Website not supported.")
        return None
''''
def get_flipkart_price(url):
    # Use ScrapingBee API if the URL contains 'flipkart.com'
    response = requests.get(
            'https://app.scrapingbee.com/api/v1/',
            params={
                'api_key': api_key,
                'url': url,
                'render_js': 'true'  # Render the page if needed
            }
        )
    if response.status_code == 200:
            with open('flipkart_response.html','w', encoding='utf-8') as f:
                f.write(response.text)
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(response.text, 'html.parser')
            try:
                price_element = soup.select_one('div.Nx9bqj.CxhGGd')
                if price_element:
                    price_text = price_element.text
                    print(f"Raw price text from Flipkart: {price_text}")

                    # Clean and convert price text to float
                    price = float(re.sub(r'[^\d.]', '', price_text))
                    return price
            except Exception as e:
                print(f"An error occurred while extracting price from Flipkart: {e}")
                return None
    else:
            print(f"Failed to retrieve page from ScrapingBee: {response.status_code}")
            return None

def get_amazon_price(url):
    options = Options()
    options.add_argument("--headless")  # Run Chrome in headless mode
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--lang=en-US")  # Ensure language is set to English

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    try:
        driver.get(url)

        # Wait until the price element is present
        price_element = WebDriverWait(driver, 10).until(
            EC.any_of(
                EC.visibility_of_element_located(
                    (By.ID, 'priceblock_dealprice')
                ),
                EC.visibility_of_element_located(
                    (By.ID, 'priceblock_ourprice')
                ),
                EC.visibility_of_element_located(
                    (By.ID, 'priceblock_saleprice')
                ),
                EC.visibility_of_element_located(
                    (By.XPATH, '//span[@class="a-price-whole"]')
                )
            )
        )

        price_text = price_element.text
        print(f"Raw price text from Amazon: {price_text}")

        # Clean and convert price text to float
        price = float(re.sub(r'[^\d.]', '', price_text))
        return price

    except TimeoutException:
        print("Failed to retrieve price from Amazon: TimeoutException")
        return None
    except NoSuchElementException:
        print("Failed to retrieve price from Amazon: NoSuchElementException")
        return None
    except Exception as e:
        print(f"An error occurred while retrieving price from Amazon: {e}")
        return None
    finally:
        driver.quit()

'''


    
        

def main():
    urls=get_urls()
    for product in urls:
        id, name, email, url, desired_price, notified=product
        if notified==0:
            print(f"checking price for url:{name} at {url}")
            actual_price=get_price(url)
            if actual_price is not None:
                print(f"price for {url} is ₹{actual_price}")
                if actual_price<=float(desired_price):
                    print(f"price has dropped, sending email to {email}")
                    send_email(email, name, actual_price, url, id)
                else:
                    print(f"price is higher than desired price, no email sent")
            else:
                print(f"could not retrieve price for {url}")
        else:
            print(f"product {name} has already been notified, skipping")        
                
if __name__ == '__main__':
    main()

